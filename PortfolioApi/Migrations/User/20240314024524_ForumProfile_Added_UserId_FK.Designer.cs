// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioApi.DbContexts;

#nullable disable

namespace PortfolioApi.Migrations.User
{
    [DbContext(typeof(UserContext))]
    [Migration("20240314024524_ForumProfile_Added_UserId_FK")]
    partial class ForumProfile_Added_UserId_FK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Follower", b =>
                {
                    b.Property<int>("FollowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ForumProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("FollowerId");

                    b.HasIndex("ForumProfileId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Following", b =>
                {
                    b.Property<int>("FollowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ForumProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("FollowingId");

                    b.HasIndex("ForumProfileId");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.ForumProfile", b =>
                {
                    b.Property<int>("ForumProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileURL")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ForumProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumProfiles");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ForumProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InterestId");

                    b.HasIndex("ForumProfileId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoURL")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("ForumProfileId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PortfolioApi.Entities.GeoGame.GeoCard", b =>
                {
                    b.Property<int>("GeoCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionFour")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionOne")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionThree")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionTwo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("GeoCardId");

                    b.ToTable("GeoCards");
                });

            modelBuilder.Entity("PortfolioApi.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileURL")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Comment", b =>
                {
                    b.HasOne("PortfolioApi.Entities.Forum.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Follower", b =>
                {
                    b.HasOne("PortfolioApi.Entities.Forum.ForumProfile", "ForumProfile")
                        .WithMany("Followers")
                        .HasForeignKey("ForumProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumProfile");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Following", b =>
                {
                    b.HasOne("PortfolioApi.Entities.Forum.ForumProfile", "ForumProfile")
                        .WithMany("Followings")
                        .HasForeignKey("ForumProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumProfile");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.ForumProfile", b =>
                {
                    b.HasOne("PortfolioApi.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Interest", b =>
                {
                    b.HasOne("PortfolioApi.Entities.Forum.ForumProfile", "ForumProfile")
                        .WithMany("Interests")
                        .HasForeignKey("ForumProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumProfile");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Post", b =>
                {
                    b.HasOne("PortfolioApi.Entities.Forum.ForumProfile", "ForumProfile")
                        .WithMany("Posts")
                        .HasForeignKey("ForumProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumProfile");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.ForumProfile", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Interests");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("PortfolioApi.Entities.Forum.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
